name: React Native
on:
#  workflow_dispatch:
  push:
    branches:
      - feature/react-native-sdk
jobs:
  release-tag:
    name: Fetch release tag
    runs-on: ubuntu-latest
    outputs:
      latest-tag: ${{ steps.release-tag.outputs.LATEST_TAG }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Latest Release Tag
        id: release-tag
        run: |
          LATEST_TAG_V=$(git ls-remote --tags --refs --sort=-v:refname https://github.com/doordeck/doordeck-headless-sdk.git | awk -F'/' '{print $3}' | sed 's/\^{}//' | sort -V | tail -n1)
          LATEST_TAG=${LATEST_TAG_V#v}
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo $LATEST_TAG

  build-android:
    needs: release-tag
    runs-on: ubuntu-latest
    env:
      DOORDECK_SDK_VERSION: ${{ needs.release-tag.outputs.latest-tag }}
      TURBO_CACHE_DIR: .turbo/android
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/actions/react-native-setup

      - name: Cache turborepo for Android
        uses: actions/cache@v4
        with:
          path: ${{ env.TURBO_CACHE_DIR }}
          key: ${{ runner.os }}-turborepo-android-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-turborepo-android-

      - name: Check turborepo cache for Android
        run: |
          cd react-native
          TURBO_CACHE_STATUS=$(node -p "($(yarn turbo run build:android --cache-dir="${{ env.TURBO_CACHE_DIR }}" --dry=json)).tasks.find(t => t.task === 'build:android').cache.status")

          if [[ $TURBO_CACHE_STATUS == "HIT" ]]; then
            echo "turbo_cache_hit=1" >> $GITHUB_ENV
          fi

      - name: Install JDK
        if: env.turbo_cache_hit != 1
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '17'

      - name: Finalize Android SDK
        if: env.turbo_cache_hit != 1
        run: |
          /bin/bash -c "yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses > /dev/null"

#      - name: Cache Gradle
#        if: env.turbo_cache_hit != 1
#        uses: actions/cache@v4
#        with:
#          path: |
#            ~/.gradle/wrapper
#            ~/.gradle/caches
#          key: ${{ runner.os }}-gradle-${{ hashFiles('example/android/gradle/wrapper/gradle-wrapper.properties') }}
#          restore-keys: |
#            ${{ runner.os }}-gradle-

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build example for Android
        env:
          JAVA_OPTS: "-XX:MaxHeapSize=6g"
        run: |
          cd react-native
          yarn turbo run build:android --cache-dir="${{ env.TURBO_CACHE_DIR }}"


#  build-ios:
#    needs: release-tag
#    runs-on: macos-latest
#    env:
#      DOORDECK_SDK_VERSION: ${{ needs.release-tag.outputs.latest-tag }}
#      TURBO_CACHE_DIR: .turbo/ios
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#
#      - name: Setup
#        uses: ./.github/actions/react-native-setup
#
#      - name: Cache turborepo for iOS
#        uses: actions/cache@v4
#        with:
#          path: ${{ env.TURBO_CACHE_DIR }}
#          key: ${{ runner.os }}-turborepo-ios-${{ hashFiles('yarn.lock') }}
#          restore-keys: |
#            ${{ runner.os }}-turborepo-ios-
#
#      - name: Check turborepo cache for iOS
#        run: |
#          cd react-native
#          TURBO_CACHE_STATUS=$(node -p "($(yarn turbo run build:ios --cache-dir="${{ env.TURBO_CACHE_DIR }}" --dry=json)).tasks.find(t => t.task === 'build:ios').cache.status")
#
#          if [[ $TURBO_CACHE_STATUS == "HIT" ]]; then
#            echo "turbo_cache_hit=1" >> $GITHUB_ENV
#          fi
#
#      - name: Restore cocoapods
#        if: env.turbo_cache_hit != 1
#        id: cocoapods-cache
#        uses: actions/cache/restore@v4
#        with:
#          path: |
#            ./react-native/**/ios/Pods
#          key: ${{ runner.os }}-cocoapods-${{ hashFiles('example/ios/Podfile.lock') }}
#          restore-keys: |
#            ${{ runner.os }}-cocoapods-
#
#      - name: Install cocoapods
#        if: env.turbo_cache_hit != 1 && steps.cocoapods-cache.outputs.cache-hit != 'true'
#        run: |
#          cd react-native
#          cd example/ios
#          pod install
#        env:
#          NO_FLIPPER: 1
#
#      - name: Cache cocoapods
#        if: env.turbo_cache_hit != 1 && steps.cocoapods-cache.outputs.cache-hit != 'true'
#        uses: actions/cache/save@v4
#        with:
#          path: |
#            ./react-native/**/ios/Pods
#          key: ${{ steps.cocoapods-cache.outputs.cache-key }}
#
#      - name: Build example for iOS
#        run: |
#          cd react-native
#          yarn turbo run build:ios --cache-dir="${{ env.TURBO_CACHE_DIR }}"

#  publish-npm:
#    needs: [release-tag, build-android, build-ios]
#    env:
#      DOORDECK_SDK_VERSION: ${{ needs.release-tag.outputs.latest-tag }}
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#
#      - name: Update versions everywhere
#        run: |
#          cd react-native
#          ## package.json
#          jq --arg version "$DOORDECK_SDK_VERSION" '.version = $version' package.json > tmp.json && mv tmp.json package.json
#
#          ## podspec
#          sed -i "s/\(doordeck_sdk_version *= *\).*/\1'${DOORDECK_SDK_VERSION}'/" HeadlessReactNativeSdk.podspec
#
#          ## build.gradle
#          sed -i 's/^def doordeckSdkVersion = .*$/def doordeckSdkVersion = "'"${DOORDECK_SDK_VERSION}"'"/' android/build.gradle
#
#          cat HeadlessReactNativeSdk.podspec
#          echo ""
#          cat android/build.gradle
#          echo ""
#          cat package.json
#
#      - name: Setup
#        uses: ./.github/actions/react-native-setup
#
#      - name: Build package
#        run: |
#          cd react-native
#          yarn prepare
#
#      - name: Publish to npm
#        env:
#          NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISHING_TOKEN }}
#        run: |
#          cd react-native
#          npm publish --access public
